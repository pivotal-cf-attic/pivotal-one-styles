/*doc
---
title: Forms
name: form
category: Base CSS
---

The application uses different form elements in different contexts.
You can combine them to make more elaborate and specific forms that meet your use case.

<div class="alert alert-warning">
<h2 class="mtn">Styleguide specific classes</h2>
We use the <code>.styleguide-form</code> class to make form elements easier to see in the
context of the styleguide. This class should be deleted when using form elements on actual
pages in the application.
</div>

*/
/*doc
---
title: Inputs & Labels
name: input
parent: form
category: Base CSS
---

An input with the label top aligned (this is the default layout).

```haml_example
%form.styleguide-form{:role => "form"}
  .form-group
    %label{:for => "exampleInputEmail1"}
      %abbr{:title => "required"} *
      Email address
    %input#exampleInputEmail1.form-control{:placeholder => "Enter email", :type => "email", :required => "required", 'aria-required' => "true"}
```

Use Bootstrap's predefined grid classes to align labels and groups of form controls in a horizontal
layout by adding `.form-horizontal` to the form. Doing so changes `.form-groups` to behave as grid rows, so no need for `.row`.

An input with the label left aligned

```haml_example
%form.styleguide-form.form-horizontal{:role => "form"}
  .form-group
    .col-md-6
      %label.control-label{:for => "exampleInputEmail1"}
        %abbr{:title => "required"} *
        Email address
    .col-md-18
      %input#exampleInputEmail1.form-control{:placeholder => "Enter email", :type => "email", :required => "required", 'aria-required' => "true"}
```

An input with the label right aligned (N.B., control-label class provides the right alignment):

```haml_example
%form.styleguide-form.form-horizontal{:role => "form"}
  .form-group
    %label.col-md-6.control-label{:for => "exampleInputEmail1"}
      %abbr{:title => "required"} *
      Email address
    .col-md-18
      %input#exampleInputEmail1.form-control{:placeholder => "Enter email", :type => "email", :required => "required", 'aria-required' => "true"}
```
*/

.form-group {
  abbr {
    float: right;
    margin-left: 5px;
    border-bottom: 0;
  }
  [class*="col"].control-label {
    abbr {
      float: none;
      margin-right: 2px;
    }
  }
}

label {
  font-weight: 400; //override bootstrap
}

// do not simplify placeholder styles, we need a separate line per browser because otherwise browser will invalidate the entire group
::-webkit-input-placeholder {
  font-weight: 200;
}

:-moz-placeholder { /* Firefox 18- */
  font-weight: 200;
}

::-moz-placeholder {  /* Firefox 19+ */
  font-weight: 200;
}

:-ms-input-placeholder {
  font-weight: 200;
}

/*doc
---
title: Text Area
name: textarea
parent: form
category: Base CSS
---

Text areas are used for larger amounts of input.

```haml_example
%form.styleguide-form{:role => "form"}
  .form-group
    %label{:for => "exampleTextAreaId"} Description
    %textarea#exampleTextAreaId.form-control{:rows => "3"}
```

*/

/*doc
---
title: Checkboxes & Radios
name: Checkboxes
parent: form
category: Base CSS
---
Checkboxes are for selecting one or several options in a list while radios are for selecting one option from many.

### Default (stacked)

```haml_example
%form.styleguide-form{:role => "form"}
  .checkbox
    %label
      %input{:type => "checkbox", :value => ""}
        Option one is this and that&mdash;be sure to include why it's great
  .radio
    %label
      %input#optionsRadios1{:checked => "", :name => "optionsRadios", :type => "radio", :value => "option1"}
        Option one is this and that&mdash;be sure to include why it's great
  .radio
    %label
      %input#optionsRadios2{:name => "optionsRadios", :type => "radio", :value => "option2"}
        Option two can be something else and selecting it will deselect option one
```

### Inline checkboxes

Use `.checkbox-inline` or `.radio-inline` class to a series of checkboxes or radios for controls appear on the same line.

```haml_example
%form.styleguide-form{:role => "form"}
  .form-group
    %label.checkbox-inline
      %input#inlineCheckbox1{:type => "checkbox", :value => "option1"}
        1
    %label.checkbox-inline
      %input#inlineCheckbox2{:type => "checkbox", :value => "option2"}
        2
    %label.checkbox-inline
      %input#inlineCheckbox3{:type => "checkbox", :value => "option3"}
        3

  .form-group
    %label.radio-inline
      %input#inlineradio1{:type => "radio", :value => "option1"}
        1
    %label.radio-inline
      %input#inlineradio2{:type => "radio", :value => "option2"}
        2
    %label.radio-inline
      %input#inlineradio3{:type => "radio", :value => "option3"}
        3
```

*/
input[type="radio"] {
  margin-top: 2px; // bootstrap override: make radios line up with our small font.
}

/*doc
---
title: Inline Forms
name: inline_forms
parent: form
category: Base CSS
---

Add `.form-inline` to your `<form>` for left-aligned and inline-block controls. This only applies to forms within viewports that are at least 768px wide.


<div class="alert alert-warning">
<h2 class="mtn">Requires custom widths</h2>
Inputs, selects, and textareas are 100% wide by default in Bootstrap. To use the inline form, you'll have to set a width on the form controls used within.
</div>

<div class="alert alert-warning">
<h2 class="mtn">Always add labels</h2>
Screen readers will have trouble with your forms if you don't include a label for every input. For these inline forms, you can hide the labels using the <code>.sr-only</code> class.
</div>


```haml_example
%form.styleguide-form.form-inline{:role => "form"}
  .form-group
    %label.sr-only{:for => "exampleInputEmail2"} Email address
    %input#exampleInputEmail2.form-control{:placeholder => "Enter email", :type => "email"}
  .form-group
    %label.sr-only{:for => "exampleInputPassword2"} Password
    %input#exampleInputPassword2.form-control{:placeholder => "Password", :type => "password"}
  .checkbox
    %label
      %input{:type => "checkbox"}
      Remember me
  %button.btn.btn-primary{:type => "submit"} Sign in
```
*/

/*doc
---
title: Inline Forms with Labels
name: inline_forms_with_labels
parent: form
category: Base CSS
---

Add `.form-inline.inline-labels` to your `<form>` for left-aligned and inline-block controls with labels inline with inputs.


```haml_example
%form.styleguide-form.form-inline.inline-labels{:role => "form"}
  .form-group
    %label{:for => "exampleInputEmail2"} Write a thing
    %input#exampleInputEmail2.form-control{:placeholder => "Write a thing", :type => "email"}
  .form-group
    %label{:for => "exampleSelect"} Choose a thing
    %select#exampleSelect.form-control
      %option thing
  .checkbox
    %label
      %input{:type => "checkbox"}
      Remember me
  %button.btn.btn-primary{:type => "submit"} Sign in
```
*/

.form-inline.inline-labels {
  .form-group {
    input, select {
      width: auto !important;
    }
  }
}

/*doc
---
title: HTML5 controls
name: html5_controls
parent: form
category: Base CSS
---

Examples of standard form controls supported in an example form layout.

Inputs
Most common form control, text-based input fields. Includes support for
all HTML5 types: `text`, `password`, `datetime`, `datetime-local`,
`date`, `month`, `time`, `week`, `number`, `email`, `url`, `search`,
`tel`, and `color`.

<div class="alert alert-warning">
  <h2 class="mtn">Type declaration required</h2>
  Inputs will only be fully styled if their type is properly declared.
</div>

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Text input", :type => "text"}
```

Password field

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Password", :type => "password"}
```

Date

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Date", :type => "date"}
```

Number

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Number", :type => "number"}
```

With a min/max and default starting value

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Number", :type => "number", min: 0, max: 2, value: 1}
```

With a different increment value

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Number", :type => "number", step: 5}
```

Email

Use this with fields that require email addresses to pop up the correct keyboard on mobile

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Email", :type => "email"}
```

URL

Use this with fields that require urls to pop up the correct keyboard on mobile

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "URL", :type => "url"}
```

Telephone

Use this with fields that require telephone numbers to pop up the dialpad on mobile

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:placeholder => "Telephone", :type => "tel"}
```
*/

/*doc
---
title: Control states
name: validation
parent: form
category: Base CSS
---

### Validation

Bootstrap includes validation styles for error, warning, and success states on form controls. To use, add `.has-warning`, `.has-error`, or `.has-success` to the parent element. Any `.control-label`, `.form-control`, and `.help-block` within that element will receive the validation styles.

```haml_example
%form.styleguide-form{:role => "form"}
  .form-group.has-success
    %label.control-label{:for => "inputSuccess"} Input with success
    %input#inputSuccess.form-control{:type => "text"}

  .form-group.has-warning
    %label.control-label{:for => "inputWarning"} Input with warning
    %input#inputWarning.form-control{:type => "text"}

  .form-group.has-error
    %label.control-label{:for => "inputError"} Input with error
    %input#inputError.form-control{:type => "text"}
    %span.help-block.has-error Error help text

  .form-group.has-error
    .checkbox
      %label.control-label
        %input{:type => "checkbox", :value => ""}
          Checkbox which needs to be checked
      %span.help-block.has-error Error help text
```
*/

/* overrides bootstrap colors */
@mixin validation-label-color() {
  .control-label {
    color: $type-primary-4;
  }
}

.has-success {
  position: relative;
  &:before {
    content: "\f00c";
    display: block;
    position: absolute;
    bottom: 0;
    right: 0;
    height: $input-height-base;
    width: $input-height-base;
    line-height: $input-height-base;
    border-top-right-radius: $input-border-radius;
    border-bottom-right-radius: $input-border-radius;
    background-color: $green-2;
    color: $gray-5;
    font-family: FontAwesome;
    font-weight: normal;
    font-style: normal;
    text-decoration: inherit;
    text-align: center;
  }
  @include validation-label-color()
}

.has-error {
  input[type="checkbox"] {
    outline: 1px solid $red-2;
  }

  @include validation-label-color()
}

.has-warning {
  @include validation-label-color()
}



/*
---
title: Disabled Inputs
name: disabled
parent: validation
category: Base CSS
---
### Disabled Inputs

Inputs will occasionally need to be disabled. You can do that by adding the `disabled` attribute. Selects, checkboxes, fieldsets, buttons, and other form controls can all be disabled.

```haml_example
%input#disabledInput.form-control{:disabled => "", :placeholder => "Disabled input here...", :type => "text"}
```

*/

.form-control:focus {
  box-shadow: none; // override bootstrap
}

/*doc
---
title: Selects
name: selects
parent: form
category: Base CSS
---
Selects are excellent to use because they will automatically
behave as expected cross browser on different devices. Prefer
them over a custom dropdown whenever possible. Their size can
be changed via the [control sizing options](#control_sizing).

```haml_example
%form.styleguide-form{:role => "form"}
  %select.form-control
    %option default option
    %option an option
    %option another option
```
*/

/*doc
---
title: Control Sizing
name: control_sizing
parent: form
category: Base CSS
---
Set heights using classes like `.input-lg`, and set widths using grid column classes like `.col-lg-*`.

### Height sizing

Create larger or smaller form controls that match button sizes.

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control.input-lg{:placeholder => ".input-lg", :type => "text"}
  %input.form-control{:placeholder => "Default input", :type => "text"}
  %input.form-control.input-sm{:placeholder => ".input-sm", :type => "text"}
  %select.form-control.input-lg
    %option .input-lg
    %option an option
    %option another option
  %select.form-control
    %option default select
    %option an option
    %option another option
  %select.form-control.input-sm
    %option .input-sm
    %option an option
    %option another option
```

### Column sizing

Wrap inputs in grid columns, or any custom parent element, to easily enforce desired widths.

```haml_example
%form.styleguide-form{:role => "form"}
  .row
    .col-md-4
      %input.form-control{:placeholder => ".col-xs-2", :type => "text"}
    .col-md-6
      %input.form-control{:placeholder => ".col-xs-3", :type => "text"}
    .col-md-8
      %input.form-control{:placeholder => ".col-xs-4", :type => "text"}
```

*/

/*doc
---
title: Help Text
name: help_text
parent: form
category: Base CSS
---
Help text
Block level help text for form controls.

```haml_example
%form.styleguide-form{:role => "form"}
  %input.form-control{:type => "text"}
  %span.help-block A block of help text that breaks onto a new line and may extend beyond one line.
```

*/

/*doc
---
title: Static Control
name: static_control
parent: form
category: Base CSS
---
When you need to place plain text next to a form label within a horizontal form, use the `.form-control-static` class on a `<p>`.

```haml_example
%form.form-horizontal.styleguide-form{:role => "form"}
  .form-group
    %label.col-md-4.control-label Email
    .col-sm-10
      %p.form-control-static email@example.com
  .form-group
    %label.col-md-4.control-label{:for => "inputPassword"} Password
    .col-sm-10
      %input#inputPassword.form-control{:placeholder => "Password", :type => "password"}
```

*/

/*doc
---
title: Vertical static controls
name: static_controll
parent: form
category: Base CSS
---

```haml_example
%form.styleguide-form{:role => "form"}
  .form-group
    %label.control-label Email
    %p.form-control-static someguy@test.com
  .form-group
    %label.control-label{:for => "name"} Name
    %input#name.form-control{:placeholder => "name"}
```

*/
// login pages css
//.form-control {
//  border-width: $input-border-width;
//}

.help-inline {
  display: block;
  text-align: left;
  color: $state-danger-bg;
  padding: 5px 0 0 16px;
  text-transform: capitalize;
}

// Form control sizing

@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $border-radius-small);

@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-medium, $line-height-large, $border-radius-small);

.control-label{
  color: $type-primary-4
}
p.form-control-static {
  color: $type-primary-2;
}

/*doc
---
title: Read Only Text Input
name: read_only_text_input
parent: form
category: Base CSS
---

This form is used to show information that a user may wish to copy and paste somewhere.

```haml_example
%input.form-control{:value => "This should auto highlight", 'data-behavior' => 'AutoSelect', readonly: 'readonly'}
```
*/
